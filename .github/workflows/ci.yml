name: CI

on:
  push:
    branches:
      - main

jobs:
  sonar-analysis:
    name: Analyze with SonarQube
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=MCPXGenOps
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  trivy-scan:
    name: Vulnerability Scan with Trivy
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Download Trivy HTML Template
        run: curl -O https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
      - name: Run Trivy and generate HTML report
        run: |
          trivy fs . --format template --template "@html.tpl" --output trivy-report.html --severity CRITICAL,HIGH
      - name: Upload Trivy report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html

  docker-build:
    name: Build Docker Images
    runs-on: self-hosted
    needs: trivy-scan
    steps:
      - uses: actions/checkout@v4

      - name: Run version bump script
        id: version
        run: |
          VERSION=$(python3 version_bump.py)
          echo "$VERSION" > version.txt
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        run: |
          docker build -t networkcloud01/mcpxgenops:frontend-${{ steps.version.outputs.version }} \
                       -t networkcloud01/mcpxgenops:frontend-latest ./frontend

      - name: Build backend image
        run: |
          docker build -t networkcloud01/mcpxgenops:backend-${{ steps.version.outputs.version }} \
                       -t networkcloud01/mcpxgenops:backend-latest ./backend

      - name: Build ai-service image
        run: |
          docker build -t networkcloud01/mcpxgenops:ai-service-${{ steps.version.outputs.version }} \
                       -t networkcloud01/mcpxgenops:ai-service-latest ./ai-service

      - name: Tag PostgreSQL image
        run: |
          docker pull postgres:15-alpine
          docker tag postgres:15-alpine networkcloud01/mcpxgenops:postgres-${{ steps.version.outputs.version }}
          docker tag postgres:15-alpine networkcloud01/mcpxgenops:postgres-latest

      - name: Tag MongoDB image
        run: |
          docker pull mongo:6
          docker tag mongo:6 networkcloud01/mcpxgenops:mongo-${{ steps.version.outputs.version }}
          docker tag mongo:6 networkcloud01/mcpxgenops:mongo-latest

      - name: Tag Nginx image
        run: |
          docker pull nginx:alpine
          docker tag nginx:alpine networkcloud01/mcpxgenops:nginx-${{ steps.version.outputs.version }}
          docker tag nginx:alpine networkcloud01/mcpxgenops:nginx-latest

  docker-push:
    name: Push Docker Images to Docker Hub
    runs-on: self-hosted
    needs: docker-build
    env:
      DOCKER_CLIENT_TIMEOUT: 1200
      COMPOSE_HTTP_TIMEOUT: 1200
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: version
      - name: Read version from file
        id: version
        run: |
          VERSION=$(cat version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push frontend image
        run: |
          docker push networkcloud01/mcpxgenops:frontend-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:frontend-latest
      - name: Push backend image
        run: |
          docker push networkcloud01/mcpxgenops:backend-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:backend-latest
      - name: Push ai-service image
        run: |
          docker push networkcloud01/mcpxgenops:ai-service-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:ai-service-latest
      - name: Push PostgreSQL image
        run: |
          docker push networkcloud01/mcpxgenops:postgres-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:postgres-latest
      - name: Push MongoDB image
        run: |
          docker push networkcloud01/mcpxgenops:mongo-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:mongo-latest
      - name: Push Nginx image
        run: |
          docker push networkcloud01/mcpxgenops:nginx-${{ steps.version.outputs.version }}
          docker push networkcloud01/mcpxgenops:nginx-latest

  notify-slack:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Get artifact link
        id: get-url
        run: |
          echo "artifact_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ARTIFACT_URL: ${{ steps.get-url.outputs.artifact_url }}
        run: |
          payload="{
            \"attachments\": [
              {
                \"color\": \"#36a64f\",
                \"title\": \"âœ… CI Process Completed\",
                \"fields\": [
                  {\"title\": \"Build ID\",\"value\": \"${{ github.run_id }}\",\"short\": true},
                  {\"title\": \"Branch\",\"value\": \"${{ github.ref_name }}\",\"short\": true},
                  {\"title\": \"Artifacts\",\"value\": \"<${ARTIFACT_URL}|View Trivy Report & Logs>\"}
                ]
              }
            ]
          }"
          curl -X POST -H 'Content-type: application/json' --data "${payload}" $SLACK_WEBHOOK_URL
